<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lovincode&#39;s Blog</title>
  
  <subtitle>To strive, to seek, to find, and not to yield.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lovincode.github.io/"/>
  <updated>2018-04-24T01:28:01.397Z</updated>
  <id>http://lovincode.github.io/</id>
  
  <author>
    <name>lovincode &lt;huonefl@163.com&gt;</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://lovincode.github.io/2018/04/24/Spring%E6%BA%90%E7%A0%81%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%20%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%20Spring%E6%B6%88%E6%81%AF/"/>
    <id>http://lovincode.github.io/2018/04/24/Spring源码深度解析 第十三章 Spring消息/</id>
    <published>2018-04-24T01:27:35.390Z</published>
    <updated>2018-04-24T01:28:01.397Z</updated>
    
    <content type="html"><![CDATA[<p>Java消息服务（Java Message Service， JMS）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API。</p><p>用于两个应用程序之间或分布式系统中发送消息、进行异步通信。</p><p>Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。</p><p>Java消息服务的规范包括两种消息模式，点对点和发布者/订阅者。</p><p>Java消息服务支持同步和异步的消息处理</p><p>Java消息服务支持面向事件的方法接收消息，事件驱动的程序设计现在被广泛认为是一种富有成效的程序设计范例。</p><h2 id="13-1-JMS的独立使用"><a href="#13-1-JMS的独立使用" class="headerlink" title="13.1 JMS的独立使用"></a>13.1 JMS的独立使用</h2><ol><li>发送端实现<br>发送</li><li>接收端实现<br>接收</li></ol><h2 id="13-2-Spring整合ActiveMQ"><a href="#13-2-Spring整合ActiveMQ" class="headerlink" title="13.2 Spring整合ActiveMQ"></a>13.2 Spring整合ActiveMQ</h2><ol><li>Spring配置文件<br>Spring整合消息服务的使用从配置文件配置开始。<br>类似于数据库操作，Spring也将ActiveMQ中的操作统一封装至jmsTemplate中，以便我们统一使用。<br>ActiveMQConnectionFactory用于连接消息服务器，是消息服务的基础，也要注册<br>ActiveMQQueue用于指定消息的目的地</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第三方MQ工厂: ConnectionFactory --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ActiveMQ Address --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.brokerURL&#125;"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.userName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.password&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 队列模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultDestinationName"</span> <span class="attr">value</span>=<span class="string">"$&#123;activemq.queueName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这个是目的地:destination --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"destination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;activemq.queueName&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>发送端<br>Spring可以根据配置信息简化我们的工作量。<br>Spring使用发送消息到消息服务器，省去了冗余的Connection以及Session等的创建与销毁过程，简化了工作量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jmsTemplate.send(destination,<span class="keyword">new</span> MessageCreator()&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> session.createTextMessage(<span class="string">"ceshi"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>接收端</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TextMessage msg = (TextMessage)jmsTemplate.receive(destination);</span><br><span class="line">System.out.println(msg.getText());</span><br></pre></td></tr></table></figure></li></ol><p>以上的操作<br>jmsTemplate.receive(destination)方法只能接收一次消息，如果未接收到消息，则会一直等待，可设置timeout超时，但是一旦接收到消息本次接收任务就会结束。<br>可通过while(true)来实现循环监听消息服务器的消息。<br>更好的方法创建消息监听器<br><strong>消息监听器使用方式如下：</strong></p><ol><li>创建消息监听器<br>一旦有新消息Spring会将消息引导至消息监听器以便用户进行相应的逻辑处理<br>MessageListener<br>实现OnMessage()方法<br>OnMessage(Message arg0)</li><li>修改配置文件<br>使用消息监听器，需要在配置文件中注册消息容器，并将消息监听器注入到容器中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置自定义监听：MessageListener --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"textMessageListener"</span> <span class="attr">class</span>=<span class="string">"com.xxx.mq.MessageListener"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 将连接工厂、目标对了、自定义监听注入jms模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionAwareListenerContainer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"destination"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"textMessageListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>通过以上的修改便可以进行消息监听的功能了，一旦有消息传入消息服务器，则会被消息监听器坚挺到，并有Spring将消息内容引导至消息监听器的处理函数中等待用户进一步逻辑处理。</p><h2 id="13-3-源码分析"><a href="#13-3-源码分析" class="headerlink" title="13.3 源码分析"></a>13.3 源码分析</h2><h3 id="13-3-1-JmsTemplate"><a href="#13-3-1-JmsTemplate" class="headerlink" title="13.3.1 JmsTemplate"></a>13.3.1 JmsTemplate</h3><ol><li>通用代码抽取</li><li>发送消息的实现</li><li>接收消息<h3 id="13-3-2-监听器容器"><a href="#13-3-2-监听器容器" class="headerlink" title="13.3.2 监听器容器"></a>13.3.2 监听器容器</h3></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java消息服务（Java Message Service， JMS）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API。&lt;/p&gt;
&lt;p&gt;用于两个应用程序之间或分布式系统中发送消息、进行异步通信。&lt;/p&gt;
&lt;p&gt;Java消息服务是一个与具体平台无关的API
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://lovincode.github.io/2018/04/23/helloworld/"/>
    <id>http://lovincode.github.io/2018/04/23/helloworld/</id>
    <published>2018-04-23T03:02:52.892Z</published>
    <updated>2018-04-23T03:02:52.892Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
